package theGhastModding.planetGen.generators;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;

import javax.imageio.ImageIO;

import edu.cornell.lassp.houle.RngPack.RanMT;
import theGhastModding.planetGen.noise.NoiseUtils;
import theGhastModding.planetGen.noise.OctaveNoise3D;

public class GraymoonGen {
	
	public static void main(String[] args) {
		try {
			boolean test = true;
			RanMT rng = test ? new RanMT(fixed_seed) : new RanMT().seedCompletely();
			OctaveNoise3D continentNoise = new OctaveNoise3D(rng, 16, 16, 16, 4, 2.0, 0.6);
			/*int cntr = 0;
			for(int i:rng.getLongSeed()) {
				System.out.print(i + ",");
				cntr++;
				cntr %= 16;
				if(cntr == 0) {
					System.out.println();
				}
			}*/
			
			int width = 4096;
			int height = 2048;
			int planetRadius = 200000;
			double resMul = 200000.0 / (double)planetRadius;
			
			double continentStretch = 2.0;
			double continentMul = 5.0;
			
			double groundLargeDetailStretch = 0.35;
			double groundDetailMul = 1.0;
			
			double[][] continentMap = new double[width][height];
			System.out.println("Continents & Biomes");
			for(int i = 0; i < width; i++) {
				for(int j = 0; j < height; j++) {
					continentMap[i][j] = NoiseUtils.sampleSpherableNoise(continentNoise, i, j, width, height, continentStretch * resMul, continentStretch * resMul, 0.25) * continentMul;
					continentMap[i][j] = 1.0 - Math.max(0, Math.min(1, continentMap[i][j]));
				}
			}
			
			for(int i = 0; i < width; i++) {
				for(int j = 0; j < height; j++) {
					if(continentMap[i][j] < 0) continue;
					
				}
			}
			
			BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
			for(int i = 0; i < width; i++) {
				for(int j = 0; j < height; j++) {
					double v = continentMap[i][j];
					int col = (int)(v * 255.0);
					int r,g,b;
					r = g = b = Math.max(0, Math.min(255, col));
					
					img.setRGB(i, j, b | (g << 8) | (r << 16));
				}
			}
			ImageIO.write(img, "png", new File("continents.png"));
			
			/*System.out.println("Ground");
			OctaveNoise3D groundNoiseLargeDetail = new OctaveNoise3D(rng, 16, 16, 16, 4, 2.0, 0.5);
			double[][] ground = new double[width][height];
			for(int i = 0; i < width; i++) {
				for(int j = 0; j < height; j++) {
					if(continentMap[i][j] > 0) {
						double val = NoiseUtils.sampleSpherableNoise(groundNoiseLargeDetail, i, j, width, height, groundLargeDetailStretch * resMul, groundLargeDetailStretch * resMul, 0.31);
						val = Math.abs(val) * 0.1 + 0.2 * continentMap[i][j];
						//val += 0.05;
						ground[i][j] = val;
					} else {
						double val = Math.abs(NoiseUtils.sampleSpherableNoise(groundNoiseLargeDetail, i, j, width, height, groundLargeDetailStretch * resMul, groundLargeDetailStretch * resMul, 0.31)) * 0.1;
						if(val < 0) val = 0;
						ground[i][j] = val;
					}
				}
			}
			ComplexSurface.displayMap("ground.png", ground);*/
			
			System.out.println("Craters");
			double[][] craters = new double[width][height];
			for(int i = 0; i < width; i++) Arrays.fill(craters[i], 0.6);
			int numCraters = 50;
			double craterStrength = 0.3;
			for(int i = 0; i < numCraters; i++) {
				double craterX = rng.nextInt(width);
				double craterY = rng.nextInt(height);
				int craterRadius = (int)Math.ceil(rng.nextDouble() * 20 + 20);
				int outerRadius = (int)(craterRadius * 1.1);
				for(int j = 0; j < craterRadius*2; j++) {
					for(int k = 0; k < craterRadius*2; k++) {
						int x = j - craterRadius;
						int y = k - craterRadius;
						
						int pixelX = (x + (int)craterX);
						if(pixelX < 0) pixelX += width;
						pixelX %= width;
						int pixelY = (y + (int)craterY);
						if(pixelY < 0) pixelY += height;
						pixelY %= height;
						
						double dist = Math.sqrt(x * x + y * y);
						if(dist <= craterRadius) {
							double strength = Math.max(0, Math.cos(dist / (double)craterRadius * Math.PI)) * craterStrength;
							
							craters[pixelX][pixelY] -= strength;
						}else if(dist <= outerRadius) {
							
						}
					}
				}
			}
			ComplexSurface.displayMap("craters.png", craters);
			
		}catch(Exception e) {
			System.err.println("Error: ");
			e.printStackTrace();
			System.exit(1);
		}
	}
	
	private static final int[] fixed_seed = new int[] { // 2,698,966,514,655,541,623 300 2.6 8 1 42
			178709473,-1820209147,-1540717568,1908574711,-1330883869,-1815092435,-1511910098,-475587614,475696601,687080299,-1102239555,-330026436,-571541577,-38564925,1711489193,-2004524584,
			-1878194481,956220136,401229824,715903529,-1946623472,-1543292916,376460053,-784859263,1603979552,599487667,1414214566,-387590497,127225618,1515583493,497539505,2063931079,
			788031161,-1240627137,301172569,1828194961,-1654965730,-1941123494,430494647,1130532335,-1956194139,557270627,1187674899,-255630121,-853824022,-1527677494,-101317565,-1267605104,
			-1604595848,1094885740,959983985,-197534979,1971590300,1265195917,-519224815,1209004753,924713749,-1891761108,993462313,-1533530616,1827964836,1912347934,-1840068926,-1367811850,
			370508368,1548559157,-1940330240,-978076124,1015684955,1953409481,1903198038,1165995759,349176679,848153625,130062322,-899917908,-228768808,-1028527667,1479105512,224028414,
			2042180512,2026944108,-2096167646,147981347,1072954373,-723151136,-945774769,-1476290879,1988560904,-1239002660,54827945,944691963,1508392521,1705970654,974467288,807684558,
			-665187226,306157620,748065138,-1532702737,1304576018,803476680,-1710167466,-189803991,1083290586,-274539536,-1841809393,-990935768,-1022966124,-1400258784,604760230,1709937878,
			2069145853,-1129015031,-887599903,576330045,1551463852,-1910036139,931388419,-1054286359,-926081777,1486112014,1888634632,-1141311448,781394003,-160672857,-595109672,1208397238,
			773396931,-1462952324,1813228143,1421323038,2890142,-1557336396,45425995,273255033,586075938,1020984466,951407970,1482336546,1247445857,-1884345085,-1095791647,-1186509005,
			821355573,478355598,-37170790,1150625143,746888828,-951152010,184789407,-1813578725,1506723807,503383356,-1487297529,-1020075708,-911795461,1718797122,-779829362,171214604,
			1490878527,1627860283,1638046983,-497681635,-1009817371,114972281,1109098911,1401465679,363952745,-879495803,477571139,399031928,-892729593,339321502,-1140234579,-1035683708,
			-600319259,-1516608370,-73360203,-60591126,1929696151,-970092351,-828376816,941778066,798084357,-1333855987,-651195513,-326749822,-911910031,-1132303692,376186595,-1911055954,
			1286034609,1466465261,1052840668,-89740566,1523788685,2060364654,-69889912,-53589968,-1318380852,-714813861,2058889958,-521011094,-1623842920,1080151902,-1741563322,-760204054,
			1037222437,1851898837,-1234503845,-553480255,94941843,-108583935,1179384772,75942478,-1014812034,402245742,843323197,-1331051466,236867390,1193056385,-1554018413,1705961544,
			422636561,789905820,215479518,181265884,717069905,-646083359,92808030,-1797213246,112481802,392023593,971904472,1264314968,1546574252,-1681808821,-1398503296,-359962942,
			-1630400651,-511066644,-1904317698,1229800633,-1105323898,1817152431,850273056,-171630304,-608748351,1433819718,111321055,1908520019,2029101819,1606671468,8665886,1422833352,
			-1825973226,-48630308,-1434751895,-1624434911,-843825344,-886318590,-869577902,-164920771,393023835,222854126,-1224088912,1469659028,825459356,-1835775245,1702908372,256717332,
			433682318,1229734381,-268648327,1593548147,-1420680412,2028750444,1449140246,1439931297,-1540787757,1045616091,1064419094,-895525559,-275889010,1849427358,457353904,1214285812,
			1031371300,1940770678,145416801,44231175,-474232146,422556268,-112567921,-1811970589,-1879281287,1827118861,-759707052,1586094953,-1980585919,418789434,-1228449849,-484329008,
			610529403,-1699979488,806551931,1239606591,-2102317260,-1133243452,-1154554825,-1557287559,133994077,-1752784221,137580003,503405194,-1674419977,734667510,1535549365,-1918689535,
			1920883428,1299203530,-1475280716,499862066,603471405,1093694702,1480843155,30593655,-1064248373,-516473051,1050625631,1083910283,-276162867,-1910171224,-778109956,2083152139,
			1476636303,-2135528203,-1439074549,-1187665894,1365694915,1240396595,928686191,-1206646444,1253748777,1893885841,-1140562573,1708361494,1865115002,645170209,-117499114,1231716112,
			-850504697,-123055980,1447276491,-1774230974,-1376987307,1214693536,-74863036,-1165968666,-698354203,95199965,178458563,-720927985,700898372,-541073801,428859143,2076035885,
			2074224589,-1480588739,494119494,-1597788075,1839071360,496378795,852936253,835494743,-510327847,-1068495920,316497681,1114570283,-535429286,-2076002301,-1872863631,794815471,
			-755598682,-2104613221,721689016,768974292,-1698950389,-824412840,-1579100343,663343827,1424401543,-1586081360,1914773627,-1726566996,-1603975699,-318327395,1506140911,1705499462,
			-859827886,1218967180,1234199758,943327733,-1480540017,-803986327,-1400240562,400731655,-1935403213,1024636697,-1898851210,1239030548,-283239490,108891752,-124130570,2034362474,
			-608492535,-1032372428,-981555448,1642178535,-832065802,1655484957,1537321868,-397152914,-819393149,582750988,-382553947,-1621253156,-61808493,706416314,978331655,929674515,
			-2001379321,-199859957,-865488979,979566470,-1145538700,-1983597434,2140033786,-1016685249,-1339576564,2064044125,693149309,-1761052398,1715398689,1290737182,1479180613,505690079,
			1012393371,-987082426,-913636935,1249143856,152086448,323212740,1878506635,1500126613,-520972852,1507782139,1777089089,-1090608964,149191153,-2092984136,-178188131,1064942406,
			-1242478209,-1648584394,1059378187,1684413635,36553115,905237451,-395256659,103686977,-305737484,1172438724,1080284711,-1726286915,1518522792,1495441019,2051810217,1236262279,
			-1354787766,2014663908,-1662250419,-1180953263,943143631,1151303801,-2111710372,1539094281,1746264708,1958291952,27096765,48832329,-718659884,-2145893608,1284390124,881037660,
			758792835,-409651760,-1821222060,889728214,1640529192,-165494433,1248990435,-1844169568,-36716046,1014180311,-1007627023,580887954,-314342061,1369749137,1681789581,325262625,
			-35895973,-1802534719,1687159374,-1700524326,133883381,-1030844228,-156100268,1541491840,-39003835,970870269,-1643028850,1494866789,354098314,-1494598349,-1106211077,-1935140145,
			-487718641,-1390145966,-1328673037,-336905500,-2140158260,-717358044,885370101,-1606876267,-931657829,-1411221374,-1560791970,-1194202558,1298788538,-2059194846,713215898,1976662297,
			-372289938,-887534569,1104165701,-1856699288,-1269144134,334570895,-1731344490,-1722633755,-1353146587,-2082791151,449719109,-2116366352,-1025507131,534509044,-100391074,347961981,
			1883339252,-826918298,1371469659,-925986206,881458220,-1159249068,-1479371320,-666762283,-1088657685,-1427025337,2027277639,584736064,-122797840,-1370680285,102767639,-2048674540,
			1446069370,782003717,-810457568,-650846084,443791327,234397457,2137880443,-1380910576,-125724370,-59397311,-1907009801,1057175587,1087639,-1741349711,-1750571015,-946924655,
			-595533243,1017254017,555179709,-1966162423,909949564,-1632594297,-1703739173,2006575245,1971381495,1966759591,2055256329,957274504,1020781392,1976743842,-1445005028,-367537037,
			-1328415576,-542384539,-534549447,1690750706,163846428,-1486382126,849148488,1409382444,-73962282,401421104,-681338489,-1019768986,921956601,1704894708,178254247,-451048968,
	};
	
}
